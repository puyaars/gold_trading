### This file was generated by Nexus Schema
### Do not make changes to this file directly


type ActionResult {
  error: String
  success: Boolean!
}

type Auction {
  created_at: DateTime!
  id: Int!
  is_sell: Boolean!
  is_triggered: Boolean!
  margin: Int
  price: Int
  updated_at: DateTime!
  user: User
  user_id: Int!
}

type AuthPayload {
  error: String
  success: Boolean
  user: User
}

type Bill {
  created_at: DateTime!
  id: Int!
  is_sell: Boolean!
  is_settled: Boolean!
  left_amount: Int
  price: Int
  total_amount: Int
  updated_at: DateTime!
  user: User
  user_id: Int!
}

type BillsPayload {
  bills: [Bill]
  pagination: PaginationResult
}

type Block {
  amount: Int
  created_at: DateTime!
  id: Int!
  is_sell: Boolean!
  updated_at: DateTime!
  user: User
  user_id: Int!
}

type Blockoperation {
  created_at: DateTime!
  id: Int!
  operator_id: Int!
  updated_at: DateTime!
}

type BlockoperationsPayload {
  blockoperations: [Blockoperation]
  pagination: PaginationResult
}

type Blockresult {
  blockoperation: Blockoperation
  commition: Int
  created_at: DateTime!
  id: Int!
  is_sell: Boolean!
  is_settled: Boolean!
  operator_id: Int!
  updated_at: DateTime!
  user: User
  user_id: Int!
}

type BlockresultsPayload {
  blockresults: [Blockresult]
  pagination: PaginationResult
}

type Chargeinfo {
  base_charge: Int
  charge: Int
  created_at: DateTime!
  id: Int!
  updated_at: DateTime!
  user: User
  user_id: Int!
  vip_off: Int
}

type Commition {
  amount: Int
  created_at: DateTime!
  id: Int!
  is_settled: Boolean!
  updated_at: DateTime!
  user: User
  user_id: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Deal {
  amount: Int
  buy_price: Int
  commition: Int!
  condition: String!
  created_at: DateTime!
  id: Int!
  is_sell: Boolean!
  is_settled: Boolean!
  profit: Int!
  sell_price: Int
  updated_at: DateTime!
  user: User
  user_id: Int!
}

enum DealCondition {
  auction
  normal
  settle
}

type DealsPayload {
  deals: [Deal]
  pagination: PaginationResult
}

type Document {
  created_at: DateTime!
  file: String!
  file_type: String!
  id: Int!
  updated_at: DateTime!
  user: User
  user_id: Int!
}

type Gift {
  charge: Int!
  created_at: DateTime!
  id: Int!
  trigger: Int!
  updated_at: DateTime!
  user: User
  user_id: Int!
}

type Mutation {
  cancelOffer(offer_id: Int!): OfferPayload
  changeUserRole(role: UserRole!, user_id: Int!): ActionResult
  changeUserVipSettings(base_charge: Int!, user_id: Int!, vip_off: Int!): ActionResult
  chargeRequest(amount: Int!, amount_text: String!, document: Upload!): ActionResult
  chargeUser(amount: Float!, is_charge: Boolean!, user_id: Int!): ActionResult
  confirmTransaction(transaction_id: Int!): ActionResult
  dischargeRequest(amount: Int!, amount_text: String!): ActionResult
  doBlock: ActionResult
  doSettle(price: Int!): ActionResult
  doTransaction(transaction_id: Int!): ActionResult
  login(email: String!, password: String!): AuthPayload
  logout: AuthPayload
  makeOffer(amount: Int!, is_sell: Boolean!, price: Float!): OfferPayload
  signup(bank_name: String!, bank_number: String!, email: String!, name: String!, password: String!, phone: String!, username: String!): AuthPayload
  trade(amount: Int!, offer_id: Int!): ActionResult
  updateSettings(BASE_CHARGE: Int, COMMITION: Int, DISCHARGE_ACTIVATED: Boolean, GIFT_ON_FIRSTCHARGE: Boolean, GIFT_ON_SIGNUP: Boolean, OFFER_AGE: Boolean, OFFER_EXPIRE: Int, QUOTATION: Int, TARADING_ACTIVATED: Boolean, TOLERENCE: Int, VIP_OFF: Int): Settings
  verifyUser(user_id: Int!): ActionResult
}

type Offer {
  condition: String!
  created_at: DateTime!
  id: Int!
  is_expired: Boolean!
  is_sell: Boolean!
  left_amount: Int
  price: Int
  total_amount: Int
  updated_at: DateTime!
  user: User
  user_id: Int!
}

enum OfferCondition {
  auction
  normal
}

type OfferPayload {
  error: String
  offer: Offer
  success: Boolean!
}

type OffersPayload {
  offers: [Offer]
  pagination: PaginationResult
}

input PaginationRequest {
  page: Int!
  perPage: Int
}

type PaginationResult {
  page: Int!
  perPage: Int!
  totalPage: Int!
}

type Query {
  Blockoperations(pagination: PaginationRequest, sort: SortOrder): BlockoperationsPayload
  Blockresults(pagination: PaginationRequest, sort: SortOrder, user_id: Int): BlockresultsPayload
  bills(is_open: Boolean, is_sell: Boolean, is_settled: Boolean, pagination: PaginationRequest, sort: SortOrder, user_id: Int): BillsPayload
  deals(is_sell: Boolean, is_settled: Boolean, pagination: PaginationRequest, sort: SortOrder, user_id: Int): DealsPayload
  getMyTransactions(is_confirmed: Boolean, is_done: Boolean, pagination: PaginationRequest, sort: SortOrder, transaction_type: TransactionType): TransactionsPayload
  getSettings: Settings
  getTransactions(is_confirmed: Boolean, is_done: Boolean, pagination: PaginationRequest, sort: SortOrder, transaction_type: TransactionType, user_id: Int): TransactionsPayload
  getUser(user_id: Int!): UserResult
  getUsers(pagination: PaginationRequest, role: UserRole, sort: SortOrder, verified: Boolean): UsersResult
  me: UserResult
  myBills(is_open: Boolean, is_sell: Boolean, is_settled: Boolean, pagination: PaginationRequest, sort: SortOrder, user_id: Int): BillsPayload
  myBlockresults(pagination: PaginationRequest, sort: SortOrder): BlockresultsPayload
  myDeals(is_sell: Boolean, is_settled: Boolean, pagination: PaginationRequest, sort: SortOrder): DealsPayload
  mySettleresults(pagination: PaginationRequest, sort: SortOrder): SettleresultsPayload
  offers(is_expired: Boolean, pagination: PaginationRequest, sort: SortOrder): [OffersPayload]
  settleresults(pagination: PaginationRequest, sort: SortOrder, user_id: Int): SettleresultsPayload
  settles(pagination: PaginationRequest, sort: SortOrder): settlesPayload
}

type Refer {
  created_at: DateTime!
  id: Int!
  referer: User
  referer_id: Int!
  updated_at: DateTime!
  user_id: Int!
}

type Settings {
  BASE_CHARGE: Int
  COMMITION: Int
  DISCHARGE_ACTIVATED: Boolean
  GIFT_ON_FIRSTCHARGE: Boolean
  GIFT_ON_SIGNUP: Boolean
  OFFER_AGE: Int
  OFFER_EXPIRE: Boolean
  QUOTATION: Int
  TARADING_ACTIVATED: Boolean
  TOLERENCE: Int
  VIP_OFF: Int
}

type Settle {
  created_at: DateTime!
  id: Int!
  operator_id: Int!
  price: Int
  settleresults: [SettleResult]
  updated_at: DateTime!
  user: User
}

type SettleResult {
  commition: Int
  created_at: DateTime!
  id: Int!
  operator_id: Int!
  price: Int
  profit: Int
  settle: Settle
  updated_at: DateTime!
  user: User
}

type SettleresultsPayload {
  Settleresults: [SettleResult]
  pagination: PaginationResult
}

enum SortOrder {
  asc
  desc
}

type Subscription {
  newUsers: User
  offer: Offer
  settings: Settings
}

type Transaction {
  created_at: DateTime!
  id: Int!
  operator_id: Int!
  price: Int
  settle: Settle
  updated_at: DateTime!
  user: User
}

type TransactionPayload {
  transactions: Transaction!
}

enum TransactionType {
  admin_charge
  admin_discharge
  charge
  discharge
  gift
}

type TransactionsPayload {
  pagination: PaginationResult
  transactions: [Transaction]
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  accepted_terms: Boolean!
  auction: Auction
  bank_name: String
  bank_number: String
  chargeinfo: Chargeinfo
  created_at: DateTime!
  email: String
  id: Int!
  name: String
  phone: String
  refer_id: String!
  role: String
  updated_at: DateTime!
  username: String
  verified: Boolean!
}

type UserResult {
  pagination: PaginationResult
  user: User
}

enum UserRole {
  admin
  member
  owner
  vip
}

type UsersResult {
  pagination: PaginationResult
  users: [User]
}

type settlesPayload {
  pagination: PaginationResult
  settles: [Settle]
}
